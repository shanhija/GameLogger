<?php	error_reporting(E_PARSE | E_ERROR);	ini_set("display_errors", 1);		$request = $_REQUEST["request"];include("database.php");switch ($request) {case "settings":	// For settings, simply output the settings file and precede it with the server time.	echo "#\tserverTime\t".time()."\n";	readfile("settings.txt");	break;	case "observeAPM":	observeAPM();	break;	case "observeGame":	observeGame();	break;case "observeHistory":	observeHistory();	break;	case "observeHiResAPMHistory":	observeHiResAPMHistory();	break;case "resetAPM":	resetAPM();	break;default:	echo "request not recognized: ". $request;}exit();function query($mysqli, $query) {	$result = $mysqli->query($query);	if (!$result) {		echo($mysqli->error .":". $query);		exit();	}			return $result;}function store_array (&$data, $table, $mysqli){	$cols = implode(',', array_keys($data));	foreach (array_values($data) as $value)	{		isset($vals) ? $vals .= ',' : $vals = '';		$vals .= '\''.$mysqli->real_escape_string($value).'\'';	}	query($mysqli, 'REPLACE INTO '.$table.' ('.$cols.') VALUES ('.$vals.')');}function observeAPM() {	$result = $mysqli->query("SELECT * FROM gl_apm") or die($mysqli->error .":". $query);	$data = array();	while ($row = $result->fetch_array(MYSQLI_ASSOC)) {		$data[$row["player"]] = array( apm => array_map('intval',explode(",",$row["apm"])), updated => intval($row["updated"]));	}	$data["now"] = time();	echo json_encode($data);}function observeGame() {	$result = $mysqli->query("SELECT DISTINCT(player) FROM gl_history");		$players = array();	while ($row = $result->fetch_array(MYSQLI_ASSOC)) {		array_push($players, $row["player"]);	}		$result = $mysqli->query("SELECT * FROM gl_playing");	// Collect player data to a single map	while ($row = $result->fetch_array(MYSQLI_ASSOC)) {		$data[$row["player"]] = $row;		if (!in_array($row["player"], $players)) {			array_push($players, $row["player"]);		}/*		$data[$row["player"]]["began"] = $row["began"];		$data[$row["player"]]["updated"] = $row["updated"];		$data[$row["player"]]["apmavg"] = $row["apmavg"];	*/	}		$data["players"] = $players;		echo json_encode($data);}function observeHiResAPMHistory() {	$limit = $_REQUEST["limit"];	if (!$limit) {		$limit = 600; // Get last hour	} elseif (!strcmp($limit, "none")) {		$limit = time();	}		$result = $mysqli->query("SELECT * FROM gl_apm_history WHERE updated >= ". (time() - $limit));		while ($row = $result->fetch_array(MYSQLI_ASSOC)) {		if (!array_key_exists($row["player"], $data)) {			$data[$row["player"]] = array();		}		array_push($data[$row["player"]],			array( apm => array_map('intval',explode(",",$row["apm"])), updated => intval($row["updated"])));	}		echo json_encode($data);}function resetAPM() {	$result = $mysqli->query("DELETE FROM gl_apm");}function splitStr($s) {	return array_map('intval',explode("\t",$s));}function observeHistory() {	$result = $mysqli->query("SELECT * FROM gl_apm_minute ORDER BY ends");		while ($row = $result->fetch_array(MYSQLI_ASSOC)) {		if (!array_key_exists($row["player"], $data)) {			$data[$row["player"]] = array(apm => array(), games => array());		}		array_push($data[$row["player"]]["apm"],			array( apm => array_map('intval',explode(",",$row["apm"])), began => intval($row["began"]), ends => intval($row["ends"])));	}			$result = $mysqli->query("		SELECT * FROM gl_history 		UNION 		SELECT * FROM gl_playing 		ORDER BY BEGAN");	// Collect player data to a single map	while ($row = $result->fetch_array()) {		$game = array(			gameid => intval($row["gameid"]), 			began => intval($row["began"]), 			updated => intval($row["updated"]), 			apmsum => intval($row["apmsum"]),			updates => intval($row["updates"]));					if (!array_key_exists($row["player"], $data)) {			$data[$row["player"]] = array(apm => array(), games => array());		}		array_push($data[$row["player"]]["games"], $game);		}	echo json_encode($data);}?>